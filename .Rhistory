# View the resulting dataset
head(data_jan_to_june)
data %>%
select(JAN, FEB, MAR, APR, MAY, JUNE) %>%
print()
data <- data %>%
mutate(
STATE_UT_NAME = str_to_title(STATE_UT_NAME),
DISTRICT = str_to_title(DISTRICT)
)
library(ggplot2)
library(dplyr)
library(sf)  # Only if using spatial data
scatter <- function(dataset,MAR,MAY) {
filtered_data <- filter_data(dataset,NOV,Jan-Feb)
ggplot(data = filtered_data,   # set data
mapping = aes(     # map aesthetics to column values
x = MAR,           # map x-axis to age
y = MAY,         # map y-axis to weight
color = outcome,
))+      # map size to age
geom_point(             # display data as points      # points display as diamonds
alpha = 0.3)            # point transparency at 30%
}
ggplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
ggsave("rainfall_plot.png", width = 8, height = 5)  # Save to file
library(renv)
detach("package:renv", unload = TRUE)
View(dataset)
# Install necessary packages
install.packages(c("pacman", "readxl", "openxlsx", "writexl", "janitor", "tidyverse", "dplyr", "rio", "here"))
# Load libraries
library(readxl)
library(openxlsx)
library(pacman)
# Load additional libraries using pacman
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here         # File path handling
)
# Import dataset
data <- read_excel("D:/GPH Course files/Digital Health/Sidramaticfile225566/dataset.xlsx")
# View column names
colnames(data)
# View summary of the DISTRICT column
summary(data$DISTRICT)
# Clean column names
data <- data %>%
janitor::clean_names() %>%
rename(
state_ut_name = state_name # Ensure `state_name` exists in the dataset
# Install necessary packages
install.packages(c("pacman", "readxl", "openxlsx", "writexl", "janitor", "tidyverse", "dplyr", "rio", "here"))
# Load libraries
library(readxl)
library(openxlsx)
library(pacman)
# Load additional libraries using pacman
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here         # File path handling
)
View(data)
View(updated_rainfall_data)
View(dataset)
View(data)
View(updated_rainfall_data)
data <- updated_rainfall_data %>%
janitor::clean_names() %>%
rename(
STATE_UT_NAME = state_name # Ensure `state_name` exists in the dataset
)
# Clean column names
data <- updated_rainfall_data %>%
janitor::clean_names() %>%
rename(
STATE_UT_NAME = state_name # Ensure `state_name` exists in the dataset
)
# Clean column names
data <- updated_rainfall_data %>%
View(updated_rainfall_data)
View(updated_rainfall_data)
View(updated_rainfall_data)
colnames(data)
summary(data$DISTRICT)
data <- data %>%
janitor::clean_names() %>%
rename(
STATE_UT_NAME = state_name # Ensure `state_name` exists in the dataset
)
renameWorksheet(
STATE_UT_NAME = state_name # Ensure `state_name` exists in the dataset
)
rename(
STATE_UT_NAME = state_name # Ensure `state_name` exists in the dataset
)
data <- dataset %>%
rename( ‘’State name’’ = STATE_UT_NAME)
data <- data %>%
rename(`State name` = STATE_UT_NAME)
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr        # Functions for data manipulation
)
data <- data %>%
rename(`State name` = STATE_UT_NAME)
write_xlsx(data, path = "updated_rainfall_data.xlsx")
install.packages(c("pacman", "readxl", "openxlsx", "writexl", "janitor", "tidyverse", "dplyr", "rio", "here"))
write_xlsx(data, path = "updated_rainfall_data.xlsx")
library(writexl)
write_xlsx(data, path = "updated_rainfall_data.xlsx")
write_xlsx(data, path = "updated_rainfall_data.xlsx")
data <- data %>%
janitor::clean_names() %>%
data_jan_to_june <- data %>%
filter(month %in% c("JAN", "FEB", "MAR", "APR", "MAY", "JUNE")) # Ensure `month` column exists
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr        # Functions for data manipulation
)
# Filter data for specific months
data_jan_to_june <- data %>%
filter(month %in% c("JAN", "FEB", "MAR", "APR", "MAY", "JUNE")) # Ensure `month` column exists
rlang::last_trace()
# Select specific columns
data %>%
select(jan, feb, mar, apr, may, june) %>% # Ensure these columns exist
print()
# Select specific columns
data %>%
select(JAN, FEB, MAR, APR, MAY, JUNE) %>% # Ensure these columns exist
print()
data %>%
select(JAN, FEB, MAR, APR, MAY, JUN) %>% # Ensure these columns exist
print()
data_jan_to_june <- data %>%
filter("JAN", "FEB", "MAR", "APR", "MAY", "JUNE") # Ensure `month` column exists
# Add a calculated column for rainfall and capitalize district/state names
data <- updated_rainfall_data %>%
mutate(
rainfall_cm = annual / 10, # Ensure `annual` column exists
state_ut_name = str_to_title(state_ut_name),
district = str_to_title(district)
)
data <- updated_rainfall_data %>%
mutate(
rainfall_cm = ANNUAL / 10, # Ensure `annual` column exists
state_ut_name = str_to_title(state_ut_name),
district = str_to_title(district)
)
data <- updated_rainfall_data %>%
mutate(
rainfall_cm = ANNUAL / 10, # Ensure `annual` column exists
STATE_UT_NAME = str_to_title(state_ut_name),
DISTRICT = str_to_title(district)
)
data <- updated_rainfall_data %>%
mutate(
rainfall_cm = ANNUAL / 10, # Ensure `annual` column exists
STATE_UT_NAME = str_to_title(STATE_UT_NAME),
DISTRICT = str_to_title(DISTRICT)
)
data <- data %>%
janitor::clean_names() %>%
write_xlsx(data, path = "updated_rainfall_data.xlsx")
Write_xlsx(data, path = "updated_rainfall_data.xlsx", col_names = TRUE)
library(writexl)
write_xlsx(data, path = "updated_rainfall_data.xlsx", col_names = TRUE)
library(ggplot2)
library(dplyr)
library(sf)  # Only if using spatial data
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr,        # Functions for data manipulation
sf          # working with spatial data
)
library(ggplot2)
library(dplyr)
library(sf)  # Only if using spatial data
scatter <- function(dataset,MAR,MAY) {
filtered_data <- filter_data(dataset,NOV,Jan-Feb)
ggplot(data = filtered_data,   # set data
mapping = aes(     # map aesthetics to column values
x = MAR,           # map x-axis to age
y = MAY,         # map y-axis to weight
color = outcome,
))+      # map size to age
geom_point(             # display data as points      # points display as diamonds
alpha = 0.3)            # point transparency at 30%
}
gplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
ggsave("rainfall_plot.png", width = 8, height = 5)  # Save to file
colnames(data)
library(tidyr)
data_long <- data %>%
pivot_longer(cols = starts_with("JAN"), # Or specify column names
names_to = "month",
values_to = "value")
ggplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
data_long <- data %>%
pivot_longer(cols = starts_with("JAN"), # Or specify column names
names_to = "month",
values_to = "value")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
library(ggplot2)
ggplot(data_long, aes(x = factor(month, levels = month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
View(scatter)
View(scatter)
View(scatter)
scatter <- function(dataset,MAR,MAY) {
filtered_data <- filter_data(dataset,NOV,Jan-Feb)
ggplot(data = filtered_data,   # set data
mapping = aes(     # map aesthetics to column values
x = MAR,           # map x-axis to age
y = MAY,         # map y-axis to weight
color = outcome,
))+      # map size to age
geom_point(             # display data as points      # points display as diamonds
alpha = 0.3)            # point transparency at 30%
}
scatter <- function(dataset,MAR,MAY) {
filtered_data <- filter_data(dataset,NOV,Jan-Feb)
ggplot(data = filtered_data,   # set data
mapping = aes(     # map aesthetics to column values
x = MAR,           # map x-axis to age
y = MAY,         # map y-axis to weight
color = outcome,
))+      # map size to age
geom_point(             # display data as points      # points display as diamonds
alpha = 0.3)            # point transparency at 30%
}
View(data_long)
View(scatter)
View(scatter)
ggplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggplot(data, aes(x = factor(month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
data_long <- data %>%
pivot_longer(cols = starts_with("JAN"), # Or specify column names
names_to = "month",
values_to = "value")
ibrary(ggplot2)
library(ggplot2)
ggplot(data_long, aes(x = factor(month, levels = month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
View(scatter)
ggsave("rainfall_plot.png", width = 8, height = 5)  # Save to file
ggplot(data, aes(x = reorder(STATE_UT_NAME, ANNUAL, sum), y = ANNUAL, fill = STATE_UT_NAME)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Annual Rainfall by State/UT", x = "State/UT", y = "Rainfall (mm)")
ggsave("rainfall_plot.png", width = 8, height = 5)  # Save to file
library(ggplot2)
ggplot(data_long, aes(x = factor(month, levels = month.abb), y = value, color = STATE_UT_NAME)) +
geom_line() +
labs(title = "Monthly Rainfall Trends", x = "Month", y = "Rainfall (mm)")
ggsave("rainfall_plot_2.png", width = 8, height = 5)  # Save to file
# Install necessary packages
install.packages(c("pacman", "readxl", "openxlsx", "writexl", "janitor", "tidyverse", "dplyr", "rio", "here"))
# Load libraries
library(readxl)
library(openxlsx)
library(pacman)
library(writexl)
# Load additional libraries using pacman
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr,        # Functions for data manipulation
sf          # working with
)
# Import dataset
data <- read_excel("D:/GPH Course files/Digital Health/Sidramaticfile225566/dataset.xlsx")
# View column names
colnames(data)
# View summary of the DISTRICT column
summary(data$DISTRICT)
# Clean column names
data <- data %>%
janitor::clean_names() %>%
data <- data %>%
rename(`State name` = STATE_UT_NAME)
data %>%
select(JAN, FEB, MAR, APR, MAY, JUN) %>% # Ensure these columns exist
print()
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr,        # Functions for data manipulation
sf          # working with
)
data %>%
select(JAN, FEB, MAR, APR, MAY, JUN) %>% # Ensure these columns exist
print()
data <- updated_rainfall_data %>%
mutate(
rainfall_cm = ANNUAL / 10, # Ensure `annual` column exists
STATE_UT_NAME = str_to_title(STATE_UT_NAME),
DISTRICT = str_to_title(DISTRICT)
data <- data %>%
data <- data %>%
janitor::clean_names() %>%
data <- data %>%
rename(`State name` = STATE_UT_NAME)
data <- data %>%
rename(`State name` = STATE_UT_NAME)
# View the resulting dataset
head(data_jan_to_june)
# View the resulting dataset
head(data_JAN_to_JUN)
# Select specific columns
data %>%
select(JAN, FEB, MAR, APR, MAY, JUN) %>% # Ensure these columns exist
print()
# View the resulting dataset
head(data_JAN_to_JUN)
write_xlsx(data, path = "updated_rainfall_data.xlsx", col_names = TRUE)
library(writexl)
# Export updated dataset to Excel
write_xlsx(data, path = "updated_rainfall_data.xlsx", col_names = TRUE)
# Export updated dataset to Excel
write_xlsx(data, path = "updated_rainfall_data.xlsx", col_names = TRUE)
runApp()
runApp()
setwd("D:/GPH Course files/Digital Health/Sidramaticfile225566")
runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
ui <- fluidPage("Hello, Shiny!")
server <- function(input, output) {}
shinyApp(ui, server)
runApp("D/GPH Course files/Digital Health/Sidramaticfile225566")
runApp()
source('Clean.R')
library(shiny); source('Clean.R')
library(shiny); source('Clean.R')
install.packages(c("pacman", "readxl", "openxlsx", "writexl", "janitor", "tidyverse", "dplyr", "rio", "here"))
source('Clean.R')
source('Clean.R')
shiny::runApp()
runApp()
source('Clean.R')
shiny::runApp()
rlang::last_trace()
list.files("D:/GPH Course files/Digital Health/Sidramaticfile225566", all.files = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
yes
runApp()
y
library(renv)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pacman::p_load(
tidyverse,   # Core data science packages (ggplot2, dplyr, tidyr, etc.)
data.table,  # Efficient data manipulation
lubridate,   # Date/time handling
stringr,     # String manipulation
readxl,      # Excel file handling
openxlsx,    # Alternative Excel file handling
plotly,      # Interactive visualizations
shiny,       # Web apps in R
caret,       # Machine learning tools
janitor,     # Cleaning tool
rio,         # For importing/exporting files
here,         # File path handling
dplyr,        # Functions for data manipulation
sf          # working with
)
runApp()
shiny::runApp()
renv::init()
shiny::runApp()
rlang::last_trace()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
file.exists("clean.R")
source("clean.R")
runApp()
runApp()
runApp()
# Select specific columns
data %>%
select(JAN, FEB, MAR, APR, MAY, JUN) %>% # Ensure these columns exist
print()
data <- data %>%
janitor::clean_names() %>%
View(server)
runApp()
runApp()
